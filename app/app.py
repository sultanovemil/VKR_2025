# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import cv2
from PIL import Image
from ultralytics import YOLO
import pytesseract
import streamlit as st
import pandas as pd
import numpy as np
from modules.preprocessing import preprocess_image
from modules.detection import detect_text_blocks
from modules.postprocessing import (
    process_fio,
    process_city_name,
    process_hours,
    extract_and_correct_year,
    process_course_period,
    process_course_topic,
    correct_registration_number,
    OrganizationProcessor
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="Document processing",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏")
st.markdown("""
**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö** –∏–∑ —Å–∫–∞–Ω–æ–≤/—Ñ–æ—Ç–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–π.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å: –§–ò–û, –ø–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ.
""")
st.markdown("---")

# Sidebar
with st.sidebar:
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    st.markdown("""
    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ** –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    2. –ù–∞–∂–º–∏—Ç–µ **¬´–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å¬ª**
    3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ **–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ** –¥–∞–Ω–Ω—ã–µ
    4. –î–æ–±–∞–≤—å—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü—É (**¬´–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É¬ª**)
    5. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    6. **–°–∫–∞—á–∞–π—Ç–µ** –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª CSV
    """)
    st.markdown("---")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    model_path = "model/pretrained_model_yolo8n.pt"
    return YOLO(model_path)

model = load_model()

def draw_boxes(image, boxes):
    """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ bounding boxes –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    image_np = np.array(image) if isinstance(image, Image.Image) else image.copy()
    
    for box in boxes:
        x_min, y_min, x_max, y_max = map(int, box.xyxy[0].tolist())
        cv2.rectangle(image_np, (x_min, y_min), (x_max, y_max), (255, 0, 0), 2)
    
    return Image.fromarray(image_np)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
if 'results_df' not in st.session_state:
    st.session_state.results_df = pd.DataFrame(columns=[
        "–§–ò–û", "–ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", 
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞", "–£—á–µ–±–Ω—ã–µ —á–∞—Å—ã", "–ì–æ—Ä–æ–¥", 
        "–ì–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"
    ])
if 'current_data' not in st.session_state:
    st.session_state.current_data = {}
if 'edited_data' not in st.session_state:
    st.session_state.edited_data = {}
if 'show_download' not in st.session_state:
    st.session_state.show_download = False

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.sidebar.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"],
                                         help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫–∞–Ω/—Ñ–æ—Ç–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è")

if uploaded_file is not None:
    # –ß—Ç–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    input_image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
    st.image(cv2.cvtColor(input_image, cv2.COLOR_BGR2RGB), 
             caption='–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 
             use_container_width=True)
    
    if st.sidebar.button("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å"):
        with st.spinner("–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
            try:
                # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                preprocessed_img = preprocess_image(input_image)
                preprocessed_image = np.array(preprocessed_img)
                # –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
                detected_blocks, results = detect_text_blocks(preprocessed_img, model)
                boxes = results[0].boxes
                
                if len(boxes) == 0:
                    st.warning("–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤")
                    st.stop()
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å bounding boxes
                image_with_boxes = draw_boxes(preprocessed_img, boxes)
                st.image(image_with_boxes, caption='–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏', use_container_width=True)
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                current_data = {
                    "–§–ò–û": "",
                    "–ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è": "",
                    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": "",
                    "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞": "",
                    "–£—á–µ–±–Ω—ã–µ —á–∞—Å—ã": "",
                    "–ì–æ—Ä–æ–¥": "",
                    "–ì–æ–¥": "",
                    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä": ""
                }
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä OrganizationProcessor
                org_processor = OrganizationProcessor()
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
                for box in boxes:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–ª–∞—Å—Å
                    bbox = box.xyxy[0].tolist()
                    class_id = int(box.cls[0].item())
                    class_name = model.names[class_id]
                    
                    # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    x_min, y_min, x_max, y_max = map(int, bbox)
                    cropped_image = Image.fromarray(preprocessed_image[y_min:y_max, x_min:x_max])
                    
                    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
                    original_text = pytesseract.image_to_string(cropped_image, lang='rus+eng').strip()
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
                    if class_name == 'name':
                        current_data["–§–ò–û"] = process_fio(original_text)
                    elif class_name == 'city':
                        current_data["–ì–æ—Ä–æ–¥"] = process_city_name(original_text)
                    elif class_name == 'hours':
                        current_data["–£—á–µ–±–Ω—ã–µ —á–∞—Å—ã"] = process_hours(original_text)
                    elif class_name == 'year':
                        current_data["–ì–æ–¥"] = extract_and_correct_year(original_text)
                    elif class_name == 'course_period':
                        current_data["–ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è"] = process_course_period(original_text)
                    elif class_name == 'course_topic':
                        current_data["–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞"] = process_course_topic(original_text)
                    elif class_name == 'registration_number':
                        current_data["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"] = correct_registration_number(original_text)
                    elif class_name == 'organization':
                        current_data["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"] = org_processor.process_organization(original_text)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ session state
                st.session_state.current_data = current_data
                st.session_state.edited_data = current_data.copy()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É" –≤ sidebar
                st.session_state.show_add_button = True
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            st.subheader("‚úèÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            st.markdown("""
            <div style="background-color:#fff4e6; padding:10px; border-radius:5px; margin-bottom:15px">
            ‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –∏—Ö
            </div>
            """, unsafe_allow_html=True)
if st.session_state.get('current_data'):
        
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    for field, value in st.session_state.current_data.items():
        st.session_state.edited_data[field] = st.text_input(
            field, 
            value=st.session_state.edited_data.get(field, value),
            key=f"edit_{field}"
        )

# –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
if st.session_state.get('show_add_button', False):
    if st.sidebar.button("–î–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É"):
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        new_row = pd.DataFrame([st.session_state.edited_data])
        st.session_state.results_df = pd.concat([st.session_state.results_df, new_row], ignore_index=True)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        st.session_state.current_data = {}
        st.session_state.edited_data = {}
        st.session_state.show_add_button = False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        st.session_state.show_download = True
        
        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É!")
        st.rerun()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
if not st.session_state.results_df.empty:
    st.header("–û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    st.write(st.session_state.results_df)

    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV (–æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º–æ–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è)
    if st.session_state.show_download:
        csv = st.session_state.results_df.to_csv(index=False, encoding='utf-8-sig').encode('utf-8-sig')
        st.sidebar.download_button(
            label="–°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name="recognized_data.csv",
            mime="text/csv; charset=utf-8-sig",
            key="download_csv"
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    if st.sidebar.button("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
        st.session_state.results_df = pd.DataFrame(columns=[
            "–§–ò–û", "–ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", 
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞", "–£—á–µ–±–Ω—ã–µ —á–∞—Å—ã", "–ì–æ—Ä–æ–¥", 
            "–ì–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"
        ])
        st.session_state.current_data = {}
        st.session_state.edited_data = {}
        st.session_state.show_add_button = False
        st.session_state.show_download = False
        st.rerun()

    else:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è")


st.markdown("---")
st.markdown("""
<style>
.footer {
    font-size: 12px;
    color: #777;
    text-align: center;
}
</style>
<div class="footer">
–°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –í–µ—Ä—Å–∏—è 1.0 \n
2025 –≥–æ–¥
</div>
""", unsafe_allow_html=True)